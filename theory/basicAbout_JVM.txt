JVM (Java virtual MAchine) - It provides a run time environment in which java bytecode can be executed.
# Java Virtual Machine (JVM) is an abstract computing machine that executes code written in the Java
# programming language. The JVM is designed to provide a platform-independent way for applications written
# in Java to execute.


## Features of JVM:

1. Platform independence: A program written in Java can run on any operating system, without recomp
ilation or conversion. This feature makes it possible to write once and run anywhere, giving Java its cross
platform capability.

2. Dynamic loading of classes: Classes in Java are loaded dynamically at runtime by the Just-
In-Time (JIT) compiler. Before running a class, the JIT compiler checks if
the required class has been already loaded into memory. If not, the JIT compiler loads it from
disk storage. Once loaded, the JIT compiler compiles the bytecode into native instructions
that directly interact with the underlying hardware.

3. Garbage Collection: JVM includes automatic garbage collection mechanism. Objects created within
a method are automatically destroyed when the method exits. However, objects created outside
of methods persist until they are explicitly marked as unreachable. To mark an object as reach
able, all references to it must become null.

4. Security Model: JVM provides a security model that allows developers to restrict certain operations
to specific users or groups. For example, you may want to limit access to sensitive files or network
services based on user credentials.

5. Thread Support: JVM supports multiple threads of execution. Each thread runs concurrently but shares
access to shared resources such as variables, file handles, database connections etc.

6. Dynamic Binding: In Java, methods are resolved dynamically during runtime rather than compile t
ime. This means that the actual implementation of a method is determined at runtime, based on the type
of the object the method is invoked on.

7. Reflection API: JVM provides built-in support for reflection, allowing developers to inspect and
manipulate their own programs using Java APIs. This feature gives developers flexibility to develop
and maintain complex software systems.

8. Native Method Stacks: Unlike C/C++ where functions have separate stack frames,
Java uses native method stacks. These stacks contain return addresses, local variable slots,
and other information related to function calls.

9. Class Loading Mechanism: Whenever a new class is needed, the JVM first tries
to locate the class in the system's classpath. If the class is found there, it
is compiled and loaded into memory. Otherwise, the JVM looks for the class in

other locations specified in the classpath. If still not found, the JVM attempts to load
it from the Internet or from a .jar file. After successful loading, the JVM verifies
the class through a process called linking, which ensures that the class does not violate any
security restrictions imposed by the JVM. Finally, the JVM initializes the class and creates
an instance of it.</s>




JRE (Java Runtime environment) 

It is a set of software tools and libraries which are used for dveloping and it provides the run time environment.

The Java Virtual Machine (JVM) is part of the Java Development Kit (JDK),
which also contains tools like javac (Just-In-Time Compiler), javaw.exe
(standalone version without console), jdb (Java Debugger). The JRE consists
of two parts - the JVM itself and the Java Class Library (JCL). The JVM executes
byte code generated by the javac compiler while the JCL provides classes and interfaces
for common tasks like I/O operations, string manipulation, networking etc.




JDK (Java Development Kit) 
It helps us to develop java applications, it contains JRE  + dev tools.
JDK comes with documentation explaining each class, interface and package in detail. It includes tools like jav
JDK includes tools like :
1. javac : Just-In-Time Compiler. It converts source code written in the
Java programming language into bytecode.
2. java : A command line tool to run apps developed with Java.
3. jar : A tool to create and manipulate Java ARchive files.
4. javadoc : A tool to generate documentation from Java source code.
5. jdb : The Java Debugger, a command-line debugger for Java platform code.
6. ntsrv : Network Test Server for Microsoft Windows NT/Windows 95/
Windows 98/Windows Millennium Edition/Windows 2000/Windows
NT/Windows XP.
7. keytool : A tool to manage keys and certificates used in the Java
Virtual Machine.




* JVM JRE JDK are platform dependent because configuration of each OS is different however Java is Platform independent.
